%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Template for a SPARC file
%% Author: 
%% Description:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sorts
    #w = {w0, w1, w2, w3, w4, w5, w6, w7}.
    #gate = {g0, g1, g2, g3}.
    #type = {no_gate, and_gate, or_gate}.
    #signal = {0, 1}.
predicates
    wire(#w).
    gate(#gate).
    input(#gate, #w).
    output(#gate, #w).
    type(#gate, #type).
    opposite(#signal, #signal).
    signal(#signal).
    val(#w, #signal).
    
rules
    wire(w0).
    wire(w1).
    wire(w2).
    wire(w3).
    wire(w4).
    wire(w5).
    wire(w6).
    wire(w7).
    
    gate(g0).
    type(g0, no_gate).
    input(g0, w0).
    output(g0, w1).
    
    gate(g1).
    type(g1, and_gate).
    input(g1, w1).
    input(g1, w2).
    input(g1, w3).
    output(g0, w4).
    
    gate(g2).
    type(g2, or_gate).
    input(g2, w4).
    input(g2, w3).
    output(g2, w5).
    
    gate(g3).
    type(g3, and_gate).
    input(g3, w5).
    input(g3, w6).
    output(g3, w7).
    
    signal(0).
    signal(1).
    
    val(w0, 1).
    val(w2, 0).
    val(w3, 1).
    val(w6, 1).
    
    opposite(0, 1).
    opposite(1, 0).
    
    val(W1, V1) :- output(G, W1),
                   type(G, no_gate),
                   input(G, W0),
                   val(W0, V0),
                   opposite(V1, V0).
                
    val(W1, 0) :- output(G, W1),
                   type(G, and_gate),
                   input(G, W0),
                   val(W0, 0).
                
    val(W1, 1) :-  output(G, W1),
                   type(G, and_gate),
                   -val(W1, 0).
                   
    val(W1, 1) :-  output(G, W1),
                   type(G, or_gate),
                   input(G, W0),
                   val(W0, 1).
                   
    val(W1, 0) :-  output(G, W1),
                   type(G, or_gate),
                   -val(W1, 1).
    
    -val(W,V) :- wire(W), 
                 signal(V),
                 not val(W,V).
    
    -val(W,V1) :- signal(V1),
                  val(W, V2),
                  V1 != V2.