sorts
    #students = {john,mary}.
    #courses = {math,graphs}.
    #default=d(#students).
    
predicates
    %took(X,C) => student X has taken course C.
    took(#students, #courses). 
    
    % student(X) => X is a student.
    student(#students).
    
    % course(X) => X is a course.
    course(#courses).
    
    ab(#default).
    
    %can_graduate(X) => True if student X can graduate. 
    can_graduate(#students).
    
     % all_courses(X) => X has taken all the courses listed in the knowledgebase. 
    all_courses(#students). 
    
rules
    student(john).
    student(mary).
    
    course(math).
    course(graphs).
    
    took(john,math).
    took(john,graphs).
    took(mary,graphs).
    
    all_courses(X):- student(X),took(X,graphs),took(X,math). 
    
    %closed world assumption.
    -all_courses(X) :- not all_courses(X).
    
    % student can graduate if he takes all courses. 
    can_graduate(X):- student(X),all_courses(X).
    
    % student cannot graduate if he does not take atleast one course
    -can_graduate(X):- student(X),-all_courses(X),
                        not ab(d(X)), 
                        not can_graduate(X).