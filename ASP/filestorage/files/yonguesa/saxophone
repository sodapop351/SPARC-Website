%% saxophone.sp -- 
%% Inheritance using the specificity principle -- more-specific 
%%   information overrides less specific information.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sorts

#class = {saxophone, selmer_mark}.
#object = {jake, mo, d_key, spring}.

#default1 = d1(#object).
#default2 = d2(#object).
#default3 = d3(#object).
#default = #default1 + #default2 + #default3.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicates

is_subclass(#class,#class).
subclass(#class,#class).
is_a(#object,#class).
member(#object,#class).
siblings(#class,#class).
ab(#default).
broken(#object).
broken_spring(#object).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rules

is_subclass(selmer_mark, saxophone).


%% Class C1 is a subclass of class C2 if C1 is a subclass of C2 or
%% if C1 is a subclass of C3 which is a subclass of C2.
subclass(C1,C2) :- is_subclass(C1,C2).
subclass(C1,C2) :- is_subclass(C1,C3),
                   subclass(C3,C2).

is_a(mo,selmer_mark).
is_a(jake, selmer_mark).

broken_spring(mo).



%% Object X is a member of class C if X is a C or if X is a C0
%% and C0 is a subclass of C.
member(X,C) :- is_a(X,C).
member(X,C) :- is_a(X,C0),
               subclass(C0,C).
 
%% Sibling classes are disjoint unless we are specifically told otherwise.
siblings(C1,C2) :- is_subclass(C1,C),
                   is_subclass(C2,C),
                   C1 != C2.
-member(X,C2) :- member(X,C1),
                 siblings(C1,C2),
                 C1 != C2,
                 not member(X,C2). 
                 
           
%% default d1: saxophone springs are not normally broken
-broken(X) :- member(X,saxophone),
           not ab(d1(X)).
           
broken(X) :- member(X,saxophone),
             ab(d1(X)).
           
   

%% X is abnormal with respect to d1 if it's spring is broken.
ab(d1(X)) :- broken_spring(X). 










